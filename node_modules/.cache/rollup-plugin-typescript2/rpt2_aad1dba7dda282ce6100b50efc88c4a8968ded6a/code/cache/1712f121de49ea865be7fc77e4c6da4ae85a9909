{"code":"import { isFunction } from \"@iVue/shared\";\r\nimport { effect, track, trigger } from \"./effect\";\r\nvar ComputedRefImpl = /** @class */ (function () {\r\n    function ComputedRefImpl(getter, setter) {\r\n        var _this = this;\r\n        this.setter = setter;\r\n        this.__v_isReadonly = true;\r\n        this.__v_isRef = true;\r\n        this._dirty = true;\r\n        // 默认getter执行的时候会依赖于一个effect （计算属性默认就是一个effect）\r\n        this.effect = effect(getter, {\r\n            lazy: true,\r\n            scheduler: function () {\r\n                _this._dirty = true; // 依赖的值变化了, 重制缓存\r\n                trigger(_this, 'set', 'value');\r\n            }\r\n        });\r\n    }\r\n    Object.defineProperty(ComputedRefImpl.prototype, \"value\", {\r\n        get: function () {\r\n            if (this._dirty) { // 增加缓存\r\n                this._value = this.effect();\r\n                track(this, 'value'); // 取值时收集依赖 {this:{'value':[effect]}\r\n                this._dirty = false;\r\n            }\r\n            return this._value;\r\n        },\r\n        set: function (newValue) {\r\n            this.setter(newValue);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return ComputedRefImpl;\r\n}());\r\nexport function computed(getterOrOptions) {\r\n    // 分别拿到get和set\r\n    var getter;\r\n    var setter;\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter = function () {\r\n            console.log('computed not set value');\r\n        };\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    return new ComputedRefImpl(getter, setter);\r\n}\r\n","references":["/Users/bingyang/Documents/festudy/my-vue3/packages/shared/src/index.ts","/Users/bingyang/Documents/festudy/my-vue3/packages/reactivity/src/reactivity/effect.ts"]}
